`timescale 1ps/1ps

module register_file_tb;

    localparam  NUM_REGISTERS = 8;
    localparam  DATA_WIDTH = 16;

    reg clk;
    reg reset;
    reg reg_write;

    reg  [3:0]               write_addr;
    reg  [DATA_WIDTH - 1: 0] write_data;
    reg  [3:0]               read_addr1;
    reg  [3:0]               read_addr2;

    wire [DATA_WIDTH - 1: 0] read_data1;
    wire [DATA_WIDTH - 1: 0] read_data2;

    register_file uut (
        .clk(clk),
        .reset(reset),
        .reg_write(reg_write),
        .write_addr(write_addr),
        .write_data(write_data),
        .read_addr1(read_addr1),
        .read_addr2(read_addr2),
        .read_data1(read_data1),
        .read_data2(read_data2)
    );

    task validate_test (
        input [DATA_WIDTH - 1:0] expected_data1,
        input [DATA_WIDTH - 1:0] expected_data2
    );
    begin
        $display("read_data1 = %h, read_data2 = %h", read_data1, read_data2);
        $display("expected_1 = %h, expected_2 = %h", expected_data1, expected_data2);
        if (read_data1 !== expected_data1 | read_data2 !== expected_data2) begin
            $display("Test failed");
        end else begin
            $display("Test passed");
        end
    end
    endtask

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        $display("Starting test...");
        // intialize signals
        reset = 0;
        reg_write = 0;
        write_addr = 0;
        write_data = 0;
        read_addr1 = 0;
        read_addr2 = 0;


        $display("Test 1: reset clears the register file");
        reset = 1;
        #10;
        reset = 0;
        #10;
        validate_test({DATA_WIDTH{1'b0}}, {DATA_WIDTH{1'b0}});

        // end simulation
        $stop;
    end

endmodule